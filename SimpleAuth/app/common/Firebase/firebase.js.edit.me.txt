// og.note: this is SAME for both web + mobile
import app from 'firebase/app';
import 'firebase/auth';
import 'firebase/database'; // initialize the realtime database API for your Firebase class 

import * as ROUTES from '../routes';

// if NOT using .env
const firebaseConfig = {
  apiKey:            " enter firebase details here ",
  authDomain:        " enter firebase details here ",
  databaseURL:       " enter firebase details here ",
  projectId:         " enter firebase details here ",
  storageBucket:     " enter firebase details here ",
  messagingSenderId: " enter firebase details here ",
  appId:             " enter firebase details here "
}; 

class Firebase {
  constructor() {
    app.initializeApp(firebaseConfig);

    /* Helper */
    this.serverValue = app.database.ServerValue;
    this.emailAuthProvider = app.auth.EmailAuthProvider;

    /* Firebase APIs */
    this.auth = app.auth();
    this.db = app.database(); // initialize the realtime database API for your Firebase class 
  }

  // *** Auth API ***
  doCreateUserWithEmailAndPassword = (email, password) => 
    this.auth.createUserWithEmailAndPassword(email, password);

  doSignInWithEmailAndPassword = (email, password) => 
    this.auth.signInWithEmailAndPassword(email, password);
  
  doSignOut = () => this.auth.signOut();

  doPasswordReset = email => this.auth.sendPasswordResetEmail(email);

  doSendEmailVerification = () => 
    this.auth.currentUser.sendEmailVerification({
      url: ROUTES.REACT_APP_CONFIRMATION_EMAIL_REDIRECT, 
    });

  doPasswordUpdate = password => this.auth.currentUser.updatePassword(password);

  doUserCheck = () => console.log ('TEST > ' +this.auth.currentUser.email); // TBD
  
  // *** Merge Auth and DB User API *** //
  onAuthUserListener = (next, fallback) => 

    this.auth.onAuthStateChanged(authUser => {
      if (authUser) {
        this.user(authUser.uid)
          .once('value')
          .then(snapshot => {

            const dbUser = snapshot.val();

            // default empty roles
            if (!dbUser.roles) {
              dbUser.roles = {};
            }

            // merge auth and db user
            authUser = {
              uid: authUser.uid,
              email: authUser.email,
              emailVerified: authUser.emailVerified,
              providerData: authUser.providerData,
              ...dbUser,
            };

            next(authUser);
          });
      } else {
        fallback();
      }
    });


  // *** User API ***
  user = uid => this.db.ref(`users/${uid}`);
  users = () => this.db.ref('users');

  // *** Message API ***
  // extend the interface for your Firebase class for the user entity. It defines two new functions:
  message = uid => this.db.ref(`messages/${uid}`); // one to get a reference to a user by identifier (uid) 
  messages = () => this.db.ref('messages'); // one to get a reference to all users:
} // end class

export default Firebase;
